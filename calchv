print("Soro de manutenção isotônico")
 
print ("O valor obtido é a quantidade para ser feita por etapa, considerando 4 etapas ao dia.")

# Defina o valor de P=peso

def calcular_liquido(peso, superficie_corporal=None):
    """
    Calcula a quantidade de líquido necessária com base no peso e na superfície corporal (se necessário).
    :param peso: Peso em kg.
    :param superficie_corporal: Superfície corporal em m² (apenas para peso acima de 30 kg).
    :return: Quantidade de líquido recomendada em ml, dividida por 4.
    """
    if peso <= 10:
        # Até 10 kg: 100 ml/kg/dia
        liquido = 100 * peso
    elif 10 < peso <= 20:
        # De 10 a 20 kg: 1000 ml + 50 ml/kg/dia para cada kg acima de 10 kg
        liquido = 1000 + 50 * (peso - 10)
    elif 20 < peso <= 30:
        # De 20 a 30 kg: 1500 ml + 20 ml/kg/dia para cada kg acima de 20 kg
        liquido = 1500 + 20 * (peso - 20)
    else:
        # Acima de 30 kg: 40 a 60 ml/kg/dia ou 1700 a 2000 ml/m² de superfície corporal
        if superficie_corporal is None:
            # Se não fornecer a superfície corporal, calcula baseado no peso
            liquido = 40 * peso  # Pode ser ajustado para 60 ml/kg/dia, se necessário
        else:
            # Calcula a quantidade de líquido baseado na superfície corporal
            liquido = 1700 + (superficie_corporal - 1.73) * 300  # Exemplo de cálculo para superfície corporal

    # Dividindo o resultado por 4
    liquido_dividido = liquido / 4

    return liquido_dividido

# Exemplo de uso:

peso = float(input("Digite o peso (kg): "))
if peso > 30:
    superficie_corporal = float(input("Digite a superfície corporal (m²): "))
    resultado = calcular_liquido(peso, superficie_corporal)
else:
    resultado = calcular_liquido(peso)

print(f"SG5% {resultado:.1f} ml")

print ("NaCl20%")
# Defina o valor de P
P = 6  # Você pode substituir 10 por qualquer valor desejado

# Calculando a expressão
resultado = (peso * 3/4) / 3.4 

# Garantindo que o resultado não ultrapasse 20
resultado = min(resultado, 30)

# Arredondando para uma casa decimal
resultado_formatado = round(resultado, 1)

# Imprimindo o resultado
print(f" {resultado_formatado} ml")

print ("KCl10%")
# Defina o valor de P
P = 6 # Você pode substituir 10 por qualquer valor desejado

# Calculando a expressão
resultado = (peso * 2/4) / 1.34 

# Garantindo que o resultado não ultrapasse 20
resultado = min(resultado, 20)

# Arredondando para uma casa decimal
resultado_formatado = round(resultado, 1)

# Imprimindo o resultado
print(f" {resultado_formatado} ml")

print ("Glucanalto de sódio 10%%")
# Defina o valor de P
P = 6 # Você pode substituir 10 por qualquer valor desejado

# Calculando a expressão
resultado = (peso * 10/4 ) / 9.3 

# Arredondando para uma casa decimal
resultado_formatado = round(resultado, 1)

# Imprimindo o resultado
print(f" {resultado_formatado} ml")

git init
git add .
git commit -m "Primeiro deploy"
git branch -M main
git remote add origin https://github.com/seu-usuario/seu-repositorio.git
git push -u origin main

pip freeze > requirements.txt
